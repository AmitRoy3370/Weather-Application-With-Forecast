package com.mycompany.myapp;

import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {

        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        Toolbar.setGlobalToolbar(true);

        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {

            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }

        Form mainForm = new Form("Weather App", BoxLayout.y());

        Label titleLabel = new Label("Weather App");

        TextField cityInput = new TextField("", "Enter City Name", 20, TextField.ANY);

        Button fetchButton = new Button("Fetch Weather");

        Label currentWeatherLabel = new Label("Current Weather");

        Label weatherInfo = new Label("Weather Info will appear here");

        Label sevenDayInfoLabel = new Label("7-Day Weather Info");

        TextArea sevenDayInfo = new TextArea();
        sevenDayInfo.setEditable(false);
        sevenDayInfo.setGrowByContent(true);

        Container sevenDayContainer = new Container(new BoxLayout(BoxLayout.Y_AXIS));
        //sevenDayContainer.add(sevenDayInfo);
        sevenDayContainer.setScrollableY(true);

        WeatherService weatherService = new WeatherService();

        fetchButton.addActionListener(e -> {
            String city = cityInput.getText();
            if (city.isEmpty()) {
                Dialog.show("Input Error", "Please enter a city name.", "OK", null);
                return;
            }

            sevenDayContainer.removeAll();

            weatherService.fetchWeatherData(city, weatherInfo);
            weatherService.fetch7DayForecast(city, sevenDayContainer);
        });

        mainForm.addAll(titleLabel, cityInput, fetchButton, currentWeatherLabel, weatherInfo, sevenDayInfoLabel, sevenDayContainer);
        mainForm.setScrollableY(true);

        mainForm.show();

    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
